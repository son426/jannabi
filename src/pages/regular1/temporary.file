import * as S from "./regularDetailPage1.style";
import { SONGDATA, AUDIOFILES } from "../../data/data";
import { useState, useEffect, useRef } from "react";
import { useAudios } from "../../hooks/useAudios";
import { useNavigate } from "react-router-dom";
import { useScroll } from "../../hooks/useScroll";

function RegularDetailPage1() {
  const [currentContent, setCurrentContent] = useState<any>();
  const [isHovered, setIsHovered] = useState<boolean>(false);

  const contentRef = useRef<HTMLDivElement[]>([]);
  const flagRef = useRef<boolean>(false);
  const floatingButtonRef = useRef<HTMLDivElement>(null);

  const { currentAudioIndex, audioInstances, setCurrentAudioIndex, audioRef } =
    useAudios(AUDIOFILES);
  // const { isVisible } = useScroll();
  const isVisible = true;

  const navigate = useNavigate();

  // floating 관련
  useEffect(() => {}, []);

  // scroll view 관련
  const targetCallback = (entries: any, observer: any) => {
    entries.forEach((entry: any) => {
      if (entry.isIntersecting) {
        // 타겟이 관찰될 때 실행코드
        const musicIndex = parseInt(entry.target.dataset.index) - 1;
        setCurrentAudioIndex(musicIndex);
        setCurrentContent(entry.target);
      }
    });
  };

  // index 처리 관련
  useEffect(() => {
    setCurrentContent(contentRef.current[0]);
    const observer = new IntersectionObserver(targetCallback, {
      threshold: 0.75,
    });
    contentRef.current.map((content) => {
      if (content) observer.observe(content);
    });
    flagRef.current = true;
  }, []);

  // audio 관련
  useEffect(() => {
    audioRef.current = audioInstances[currentAudioIndex];

    if (audioRef.current !== undefined) {
      // stop
      audioRef.current.pause();
      audioRef.current.currentTime = 0;

      // play (pause와 충돌관련 에러 방지용 if문)
      if (audioRef.current.paused) {
        audioRef.current.play();
      }

      return () => {
        audioRef.current.pause();
        audioRef.current.currentTime = 0;
      };
    }
  }, [currentAudioIndex, audioInstances]);

  return (
    <>
      <S.BackgroundDiv />
      {/* <S.Index isOn={isVisible}>
        <S.IndexTop>
          {SONGDATA.slice(0, 5).map((data, index) => (
            <S.IndexMenu
              key={index}
              onClick={() => {
                contentRef.current[index].scrollIntoView({
                  behavior: "smooth",
                });
                setCurrentContent(contentRef.current[index]);
              }}
              selected={
                flagRef.current && contentRef.current[index] === currentContent
              }
            >
              <p>{data.index}.</p>
              <p>{data.title}</p>
            </S.IndexMenu>
          ))}
        </S.IndexTop>
        <S.BackDiv
          onClick={() => {
            navigate(-1);
          }}
        ></S.BackDiv>
        <S.IndexBottom>
          {SONGDATA.slice(5).map((data, index) => (
            <S.IndexMenu
              key={index}
              onClick={() => {
                contentRef.current[index + 5].scrollIntoView({
                  behavior: "smooth",
                });
                setCurrentContent(contentRef.current[index + 5]);
              }}
              selected={
                flagRef.current &&
                contentRef.current[index + 5] === currentContent
              }
            >
              <p>{data.index}.</p>
              <p>{data.title}</p>
            </S.IndexMenu>
          ))}
        </S.IndexBottom>
      </S.Index> */}
      {/* <S.FloatingDiv
        ref={floatingButtonRef}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        ishovered={isHovered}
      >
        <div>재생</div>
      </S.FloatingDiv> */}
      {/* margin 용도 div */}
      <S.CoverDiv></S.CoverDiv>
      <S.ContentDiv
        ref={(el: HTMLDivElement) => (contentRef.current[0] = el)}
        data-index="1"
      >
        1번 콘텐츠
      </S.ContentDiv>
      <S.ContentDiv
        ref={(el: HTMLDivElement) => (contentRef.current[1] = el)}
        data-index="2"
      >
        2번 콘텐츠
      </S.ContentDiv>
      <S.ContentDiv
        ref={(el: HTMLDivElement) => (contentRef.current[2] = el)}
        data-index="3"
      >
        3번 콘텐츠
      </S.ContentDiv>
      <S.ContentDiv
        ref={(el: HTMLDivElement) => (contentRef.current[3] = el)}
        data-index="4"
      >
        4번 콘텐츠
      </S.ContentDiv>
      <S.ContentDiv
        ref={(el: HTMLDivElement) => (contentRef.current[4] = el)}
        data-index="5"
      >
        5번 콘텐츠
      </S.ContentDiv>
      <S.ContentDiv
        ref={(el: HTMLDivElement) => (contentRef.current[5] = el)}
        data-index="6"
      >
        6번 콘텐츠
      </S.ContentDiv>
      <S.ContentDiv
        ref={(el: HTMLDivElement) => (contentRef.current[6] = el)}
        data-index="7"
      >
        7번 콘텐츠
      </S.ContentDiv>
      <S.ContentDiv
        ref={(el: HTMLDivElement) => (contentRef.current[7] = el)}
        data-index="8"
      >
        8번 콘텐츠
      </S.ContentDiv>
      <S.ContentDiv
        ref={(el: HTMLDivElement) => (contentRef.current[8] = el)}
        data-index="9"
      >
        9번 콘텐츠
      </S.ContentDiv>
      <S.ContentDiv
        ref={(el: HTMLDivElement) => (contentRef.current[9] = el)}
        data-index="10"
      >
        10번 콘텐츠
      </S.ContentDiv>
    </>
  );
}

export default RegularDetailPage1;











css


import { styled } from "styled-components";
import backImg from "./backgreen.png";
import bg1 from "./bg1.png";
import backCursor1 from "../../data/images/backCursor1.png";
import backCursor2 from "../../data/images/backCursor2.png";

interface IIndexProps {
  isOn: boolean;
}

interface IIndexMenuProps {
  selected: boolean;
}

interface IFloatingProps {
  ishovered: boolean;
}

export const BackgroundDiv = styled.div`
  background-image: url(${backImg});
  width: 100%;
  height: 1020vh;
  position: absolute;
  top: 0;
  z-index: -1;
`;

export const Index = styled.div<IIndexProps>`
  color: white;
  position: fixed;
  width: 100%;
  height: 100vh;
  top: 0;
  opacity: ${(props) => (props.isOn ? "1" : "0")};
  transition: opacity 0.2s linear;
`;

export const IndexTop = styled.div`
  display: flex;
  justify-content: space-around;
  width: 100%;
  position: absolute;
  top: 2vh;
`;

export const IndexBottom = styled.div`
  display: flex;
  justify-content: space-around;
  width: 100%;
  position: absolute;
  top: 90vh;
`;

export const IndexMenu = styled.div<IIndexMenuProps>`
  cursor: pointer;
  width: 10%;
  transition: color 0.2s linear;
  font-weight: ${(props) => (props.selected ? "600" : "200")};
  color: ${(props) => (props.selected ? "red" : "white")};
  white-space: pre-line;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 0.2em;
  &:hover {
    color: red;
    transition: color 0.2s linear;
  }
  p {
    font-size: 0.9rem;
    font-weight: 600;
    text-align: center;
  }
`;

export const CoverDiv = styled.div`
  background-image: url(${backImg});
  background-size: contain;
  height: 100vh;
  width: 100%;
`;

export const ContentDiv = styled.div`
  background-image: url(${bg1});
  background-repeat: no-repeat;
  background-size: contain;
  width: 100%;
  aspect-ratio: 1/2;

  color: white;
  border: 1px white solid;
  display: flex;
  justify-content: center;
  align-items: center;
`;

export const BackDiv = styled.div`
  width: 40%;
  height: 50vh;
  position: fixed;
  top: 20vh;

  cursor: url(${backCursor1}) 20 30, pointer;
  &:hover {
    animation-name: cursorAnimation;
    animation-duration: 1s;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
  }

  @keyframes cursorAnimation {
    0% {
      cursor: url(${backCursor1}) 20 30, auto;
    }
    50% {
      cursor: url(${backCursor2}) 20 30, auto;
    }
    100% {
      cursor: url(${backCursor1}) 20 30, auto;
    }
  }
`;

export const FloatingDiv = styled.div<IFloatingProps>`
  position: fixed;
  top: 30vh;
  right: 10vw;
  width: ${(props) => (props.ishovered ? "200px" : "100px")};
  height: 50px;
  background-color: red;
  transition: width 0.3s ease-in-out;
`;
